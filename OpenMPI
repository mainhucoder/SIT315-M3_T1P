#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <mpi.h>
#define M_Matrix 90

void randomMatrix(int N, int m[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            m[i][j] = rand() % 10;
        }
    }
}

void mMatrix(int N, int A[N][N], int B[N][N], int C[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            C[i][j] = 0;
            for (int k = 0; k < N; k++) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

int main(int argc, char **argv) {
    srand(time(NULL));
    MPI_Init(&argc, &argv);
    
    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    
    int N = rand() % M_Matrix + 1;
    printf("Matrix Size: %d x %d\n", N, N);
    
    int A[N][N], B[N][N], C[N][N];
    if (rank == 0) {
        randomMatrix(N, A);
        randomMatrix(N, B);
    }
    
    MPI_Bcast(A, N * N, MPI_INT, 0, MPI_COMM_WORLD);
    MPI_Bcast(B, N * N, MPI_INT, 0, MPI_COMM_WORLD);
    
    struct timespec start_time, end_time;
    clock_gettime(CLOCK_MONOTONIC, &start_time);
    
    int chunk_size = N / size;
    int start_row = rank * chunk_size;
    int end_row = (rank == size - 1) ? N : (rank + 1) * chunk_size;
    
    mMatrix(N, A, B, C);
    
    MPI_Gather(C + start_row, chunk_size * N, MPI_INT, C, chunk_size * N, MPI_INT, 0, MPI_COMM_WORLD);
    
    clock_gettime(CLOCK_MONOTONIC, &end_time);
    double execution_time = (end_time.tv_sec - start_time.tv_sec) * 1e6 + (end_time.tv_nsec - start_time.tv_nsec) / 1e3;
    
    if (rank == 0) {
        printf("Execution time: %.6f microseconds\n", execution_time);
    }
    
    MPI_Finalize();
    return 0;
}
